import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import ParseMode
from aiogram.utils import executor
from aiohttp import web
import os

API_TOKEN = os.getenv('TELEGRAM_TOKEN')  # –í–∞—à —Ç–æ–∫–µ–Ω
CHANNEL_USERNAME = '@bulavka_secondhand'  # –í–∞—à –∫–∞–Ω–∞–ª

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–æ–∫
subscribed_users = set()  # –•—Ä–∞–Ω–µ–Ω–∏–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook
async def on_startup(app):
    webhook_url = f"https://{os.getenv('RENDER_URL')}/webhook/{API_TOKEN}"
    await bot.set_webhook(webhook_url)
    logging.info(f"Webhook set to {webhook_url}")

async def on_shutdown(app):
    await bot.delete_webhook()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ webhook –∑–∞–ø—Ä–æ—Å–æ–≤
async def handle_webhook(request):
    if request.match_info.get('token') != API_TOKEN:
        return web.Response(status=403)

    data = await request.json()
    update = types.Update(**data)
    await dp.process_update(update)
    return web.Response(status=200)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    user_id = message.from_user.id
    if user_id not in subscribed_users:
        await message.reply(
            "–ü—Ä–∏–≤–µ—Ç! –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª @bulavka_secondhand –∏ –ø–æ–ª—É—á–∏—Ç–µ —Å–∫–∏–¥–∫—É 50%! üéâ",
            parse_mode=ParseMode.MARKDOWN
        )
    else:
        await message.reply("–í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª, —Å–ø–∞—Å–∏–±–æ! üéâ")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª
@dp.message_handler(commands=['check_subscription'])
async def check_subscription(message: types.Message):
    user_id = message.from_user.id
    try:
        member = await bot.get_chat_member(CHANNEL_USERNAME, user_id)
        if member.status in ['member', 'administrator', 'creator']:
            if user_id not in subscribed_users:
                subscribed_users.add(user_id)
                await message.reply("–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É! –í–∞—à–∞ —Å–∫–∏–¥–∫–∞ 50%! –ü–æ–∫–∞–∂–∏—Ç–µ –Ω–∞ –∫–∞—Å—Å–µ! üéâüéâüéâ")
            else:
                await message.reply("–í—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ —Å–∫–∏–¥–∫—É 50%! üéâ")
        else:
            await message.reply("–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ @bulavka_secondhand –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞. üì≤")
    except Exception as e:
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        logging.error(f"Error checking subscription: {e}")

# –ó–∞–ø—É—Å–∫ webhook —Å–µ—Ä–≤–µ—Ä–∞
app = web.Application()
app.router.add_post(f'/webhook/{API_TOKEN}', handle_webhook)
app.on_startup.append(on_startup)
app.on_shutdown.append(on_shutdown)

# –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
if __name__ == '__main__':
    from aiogram import executor
    executor.start_polling(dp, skip_updates=True)
    web.run_app(app, port=10000)

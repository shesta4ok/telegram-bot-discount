import logging
import os
from aiogram import Bot, Dispatcher, types
from aiogram.types import ParseMode
from aiohttp import web
import asyncio

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
API_TOKEN = os.getenv('API_TOKEN')
WEBHOOK_URL = os.getenv('WEBHOOK_URL')

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–æ–∫–µ–Ω –±—ã–ª –∑–∞–≥—Ä—É–∂–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
if API_TOKEN is None:
    logging.error("API_TOKEN –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω!")
else:
    logging.info(f"–¢–æ–∫–µ–Ω –∑–∞–≥—Ä—É–∂–µ–Ω: {API_TOKEN[:10]}...")  # –≤—ã–≤–æ–¥–∏–º –ø–µ—Ä–≤—ã–µ 10 —Å–∏–º–≤–æ–ª–æ–≤ —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    logging.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {message.from_user.username}")
    await message.reply(
        "–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π —Å–∫–∏–¥–æ—á–Ω—ã–π –±–æ—Ç üéâ\n–ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª, –∏ –ø–æ–ª—É—á–∏ —Å–∫–∏–¥–∫—É 50% –Ω–∞ –ø–æ–∫—É–ø–∫—É –≤ –Ω–∞—à–µ–º –º–∞–≥–∞–∑–∏–Ω–µ! üòâ",
        parse_mode=ParseMode.MARKDOWN
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∫–∏–¥–∫–∏
@dp.message_handler(commands=['discount'])
async def send_discount(message: types.Message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥–ø–∏—Å–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ –∫–∞–Ω–∞–ª
    user_id = message.from_user.id
    chat_id = '@bulavka_secondhand'

    try:
        member = await bot.get_chat_member(chat_id, user_id)
        if member.status == 'member' or member.status == 'administrator':
            await message.reply(
                "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É! –í–∞—à–∞ —Å–∫–∏–¥–∫–∞ 50%! –ü–æ–∫–∞–∂–∏—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –Ω–∞ –∫–∞—Å—Å–µ üòÑüéâ",
                parse_mode=ParseMode.MARKDOWN
            )
        else:
            await message.reply(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–∫–∏–¥–∫—É –Ω–∞ –ø–æ–∫—É–ø–∫–∏! üòÖ",
                parse_mode=ParseMode.MARKDOWN
            )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ webhook
async def handle_webhook(request):
    json_str = await request.text()
    update = types.Update.parse_raw(json_str)
    await dp.process_update(update)
    return web.Response()

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook
async def on_start():
    logging.info("Bot started...")
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook –Ω–∞ –∞–¥—Ä–µ—Å
    if WEBHOOK_URL is None:
        logging.error("WEBHOOK_URL –Ω–µ –Ω–∞–π–¥–µ–Ω! –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
        return
    try:
        await bot.set_webhook(WEBHOOK_URL)
        logging.info(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {WEBHOOK_URL}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ webhook: {e}")

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    logging.basicConfig(level=logging.INFO)
    loop = asyncio.get_event_loop()

    # –ó–∞–ø—É—Å–∫–∞–µ–º webhook —Å–µ—Ä–≤–µ—Ä
    app = web.Application()
    app.router.add_post(f'/{API_TOKEN}', handle_webhook)

    loop.create_task(on_start())

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä –Ω–∞ Render
    web.run_app(app, port=10000)

if __name__ == '__main__':
    main()

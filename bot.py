from dotenv import load_dotenv
import os
from aiogram import Bot, Dispatcher, types
from aiogram.types import ParseMode
from aiogram.utils import executor
import sqlite3
from datetime import datetime
import logging
from aiohttp import web

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()
API_TOKEN = os.getenv('BOT_TOKEN')
PORT = int(os.getenv('PORT', 5000))  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 5000

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö SQLite (–∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –µ—ë, –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
def init_db():
    conn = sqlite3.connect('user_data.db')
    cursor = conn.cursor()
    cursor.execute('''CREATE TABLE IF NOT EXISTS users (
                        user_id INTEGER PRIMARY KEY,
                        received_discount BOOLEAN DEFAULT 0,
                        subscription_time TEXT
                    )''')
    conn.commit()
    conn.close()

async def check_if_received_discount(user_id):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø–æ–ª—É—á–∏–ª —Å–∫–∏–¥–∫—É."""
    conn = sqlite3.connect('user_data.db')
    cursor = conn.cursor()
    cursor.execute("SELECT received_discount FROM users WHERE user_id = ?", (user_id,))
    result = cursor.fetchone()
    conn.close()
    return result and result[0] == 1

def mark_discount_given(user_id):
    """–û—Ç–º–µ—Ç–∏—Ç—å, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏–ª —Å–∫–∏–¥–∫—É."""
    conn = sqlite3.connect('user_data.db')
    cursor = conn.cursor()
    cursor.execute("INSERT OR REPLACE INTO users (user_id, received_discount, subscription_time) VALUES (?, ?, ?)",
                   (user_id, 1, datetime.now().isoformat()))
    conn.commit()
    conn.close()

async def is_subscribed(user_id):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª."""
    try:
        member = await bot.get_chat_member('@bulavka_secondhand', user_id)
        return member.status == 'member'
    except Exception:
        return False

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —Å–∫–∏–¥–∫–∞ —É–∂–µ –±—ã–ª–∞ –≤—ã–¥–∞–Ω–∞
    if await check_if_received_discount(user_id):
        await message.reply("–í—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ —Å–≤–æ—é —Å–∫–∏–¥–∫—É! üòé")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
    if await is_subscribed(user_id):
        # –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∞–Ω –∏ –µ—â–µ –Ω–µ –ø–æ–ª—É—á–∏–ª —Å–∫–∏–¥–∫—É
        mark_discount_given(user_id)
        await message.reply(
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É! üéâ –í–∞—à–∞ —Å–∫–∏–¥–∫–∞ 50%! –ü–æ–∫–∞–∂–∏—Ç–µ –Ω–∞ –∫–∞—Å—Å–µ! üòé",
            parse_mode=ParseMode.MARKDOWN
        )
    else:
        # –ï—Å–ª–∏ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω
        await message.reply(
            "–ü—Ä–∏–≤–µ—Ç! üéâ\n–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª @bulavka_secondhand –∏ –ø–æ–ª—É—á–∏—Ç–µ —Å–∫–∏–¥–∫—É 50%! üëâ",
            reply_markup=types.ReplyKeyboardMarkup(
                resize_keyboard=True,
                one_time_keyboard=True
            ).add(
                types.KeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ –∫–∞–Ω–∞–ª")
            )
        )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ –∫–∞–Ω–∞–ª"
@dp.message_handler(lambda message: message.text == "–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ –∫–∞–Ω–∞–ª")
async def redirect_to_channel(message: types.Message):
    await message.reply(
        "–í–æ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª: @bulavka_secondhand",
        reply_markup=types.ReplyKeyboardRemove()
    )

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook
async def on_startup(app):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    webhook_url = f'https://telegram-bot-discount-1.onrender.com/{API_TOKEN}'  # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π URL –¥–ª—è Render
    await bot.set_webhook(url=webhook_url)
    logging.info(f"Webhook set to {webhook_url}")

async def on_shutdown(app):
    """–£–¥–∞–ª—è–µ–º webhook –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    await bot.delete_webhook()
    logging.info("Webhook deleted")

# –°–æ–∑–¥–∞—ë–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä
app = web.Application()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–∞
app.router.add_post(f'/{API_TOKEN}', dp.process_update)

# –°—Ç–∞—Ä—Ç—É–µ–º —Å–µ—Ä–≤–µ—Ä
if __name__ == '__main__':
    logging.info(f"Starting bot on port {PORT}...")
    init_db()  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å—Ç–∞—Ä—Ç–∞ –∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
    app.on_startup.append(on_startup)
    app.on_shutdown.append(on_shutdown)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
    web.run_app(app, port=PORT)
